(function() {
  describe("LanguageAwk", function() {
    var grammar;
    grammar = null;
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.packages.activatePackage('language-awk');
      });
      return runs(function() {
        return grammar = atom.grammars.grammarForScopeName('source.awk');
      });
    });
    it("parses the grammar", function() {
      expect(grammar).toBeDefined();
      return expect(grammar.scopeName).toBe("source.awk");
    });
    it("tokensizes function definition", function() {
      var tokens;
      tokens = grammar.tokenizeLine("function foobar(param) {").tokens;
      expect(tokens[0]).toEqual({
        value: 'function',
        scopes: ['source.awk', 'meta.function.awk', 'storage.type.function.awk']
      });
      expect(tokens[1]).toEqual({
        value: ' ',
        scopes: ['source.awk', 'meta.function.awk']
      });
      expect(tokens[2]).toEqual({
        value: 'foobar',
        scopes: ['source.awk', 'meta.function.awk', 'entity.name.function.awk']
      });
      expect(tokens[3]).toEqual({
        value: '(',
        scopes: ['source.awk', 'meta.function.awk']
      });
      expect(tokens[4]).toEqual({
        value: 'param',
        scopes: ['source.awk', 'meta.function.awk', 'variable.parameter.awk']
      });
      return expect(tokens[5]).toEqual({
        value: ')',
        scopes: ['source.awk', 'meta.function.awk']
      });
    });
    it("tokensizes array", function() {
      var tokens;
      tokens = grammar.tokenizeLine("arr[0]").tokens;
      expect(tokens[0]).toEqual({
        value: 'arr[',
        scopes: ['source.awk', 'variable.other.awk']
      });
      expect(tokens[1]).toEqual({
        value: '0',
        scopes: ['source.awk', 'variable.other.awk', 'constant.numeric.awk']
      });
      return expect(tokens[2]).toEqual({
        value: ']',
        scopes: ['source.awk', 'variable.other.awk']
      });
    });
    return it("tokensizes regexp", function() {
      var tokens;
      tokens = grammar.tokenizeLine('sub(/^[[:alpha:]]+/, "")').tokens;
      expect(tokens[0]).toEqual({
        value: 'sub',
        scopes: ['source.awk', 'support.function.builtin.awk']
      });
      expect(tokens[1]).toEqual({
        value: '(',
        scopes: ['source.awk']
      });
      expect(tokens[2]).toEqual({
        value: '/',
        scopes: ['source.awk', 'string.regexp.awk', 'string.regexp.begin.awk']
      });
      expect(tokens[3]).toEqual({
        value: '^',
        scopes: ['source.awk', 'string.regexp.awk', 'keyword.other.awk']
      });
      expect(tokens[4]).toEqual({
        value: '[',
        scopes: ['source.awk', 'string.regexp.awk', 'keyword.other.awk', 'punctuation.keyword.other.begin.awk']
      });
      expect(tokens[5]).toEqual({
        value: '[:alpha:]',
        scopes: ['source.awk', 'string.regexp.awk', 'keyword.other.awk', 'support.class.awk']
      });
      expect(tokens[6]).toEqual({
        value: ']',
        scopes: ['source.awk', 'string.regexp.awk', 'keyword.other.awk', 'punctuation.keyword.other.end.awk']
      });
      expect(tokens[7]).toEqual({
        value: '+',
        scopes: ['source.awk', 'string.regexp.awk', 'keyword.other.awk']
      });
      expect(tokens[8]).toEqual({
        value: '/',
        scopes: ['source.awk', 'string.regexp.awk', 'string.regexp.end.awk']
      });
      expect(tokens[9]).toEqual({
        value: ', ',
        scopes: ['source.awk']
      });
      expect(tokens[10]).toEqual({
        value: '"',
        scopes: ['source.awk', 'string.quoted.double.awk']
      });
      expect(tokens[11]).toEqual({
        value: '"',
        scopes: ['source.awk', 'string.quoted.double.awk']
      });
      return expect(tokens[12]).toEqual({
        value: ')',
        scopes: ['source.awk']
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
