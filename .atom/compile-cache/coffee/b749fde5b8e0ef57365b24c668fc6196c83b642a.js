(function() {
  module.exports = {
    "c": ["source.c"],
    "cpp": ["source.cpp"],
    "cynlib": ["source.cpp"],
    "clojure": ["source.clojure"],
    "litcoffee": ["source.litcoffee"],
    "coffee": ["source.coffee"],
    "cs": ["source.cake", "source.csx", "source.cs"],
    "css": ["source.css"],
    "markdown": ["source.gfm"],
    "gitcommit": ["text.git-commit"],
    "gitconfig": ["source.git-config"],
    "gitrebase": ["text.git-rebase"],
    "go": ["source.go", "text.html.gohtml", "source.gotemplate"],
    "html": ["text.html.gohtml", "text.html.mustache", "text.html.php", "text.html.erb", "text.html.ruby", "text.html.basic"],
    "jsp": ["text.html.jsp"],
    "java": ["source.java"],
    "jproperties": ["source.java-properties"],
    "javascript": ["source.js"],
    "json": ["source.json"],
    "less": ["source.css.less"],
    "make": ["source.makefile"],
    "mustache": ["text.html.mustache", "source.sql.mustache"],
    "objc": ["source.objc"],
    "objcpp": ["source.objcpp"],
    "perl6": ["source.perl6"],
    "perl": ["source.perl"],
    "php": ["text.html.php"],
    "plist": ["source.plist", "text.xml.plist"],
    "python": ["source.python"],
    "eruby": ["text.html.erb", "text.html.ruby", "source.js.rails source.js.jquery"],
    "ruby": ["source.ruby.rails", "source.ruby.rails.rjs", "source.sql.ruby", "source.ruby"],
    "sass": ["source.sass"],
    "scss": ["source.css.scss"],
    "csh": ["source.shell"],
    "sh": ["source.shell"],
    "tcsh": ["source.shell"],
    "zsh": ["source.shell"],
    "sql": ["source.sql"],
    "text": ["text.plain"],
    "toml": ["source.toml"],
    "xml": ["text.xml"],
    "xslt": ["text.xml.xsl"],
    "yaml": ["source.yaml"],
    "smarty": ["text.html.smarty", "text.html.basic"]
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvZ2F2YXJjaC8uYXRvbS9wYWNrYWdlcy92aW0tbW9kZWxpbmUvbGliL3ZpbS1tb2RlbGluZS1maWxldHlwZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFBQSxNQUFNLENBQUMsT0FBUCxHQUNFO0lBQUEsR0FBQSxFQUFLLENBQ0gsVUFERyxDQUFMO0lBR0EsS0FBQSxFQUFPLENBQ0wsWUFESyxDQUhQO0lBTUEsUUFBQSxFQUFVLENBQ1IsWUFEUSxDQU5WO0lBU0EsU0FBQSxFQUFXLENBQ1QsZ0JBRFMsQ0FUWDtJQVlBLFdBQUEsRUFBYSxDQUNYLGtCQURXLENBWmI7SUFlQSxRQUFBLEVBQVUsQ0FDUixlQURRLENBZlY7SUFrQkEsSUFBQSxFQUFNLENBQ0osYUFESSxFQUVKLFlBRkksRUFHSixXQUhJLENBbEJOO0lBdUJBLEtBQUEsRUFBTyxDQUNMLFlBREssQ0F2QlA7SUEwQkEsVUFBQSxFQUFZLENBQ1YsWUFEVSxDQTFCWjtJQTZCQSxXQUFBLEVBQWEsQ0FDWCxpQkFEVyxDQTdCYjtJQWdDQSxXQUFBLEVBQWEsQ0FDWCxtQkFEVyxDQWhDYjtJQW1DQSxXQUFBLEVBQWEsQ0FDWCxpQkFEVyxDQW5DYjtJQXNDQSxJQUFBLEVBQU0sQ0FDSixXQURJLEVBRUosa0JBRkksRUFHSixtQkFISSxDQXRDTjtJQTJDQSxNQUFBLEVBQVEsQ0FDTixrQkFETSxFQUVOLG9CQUZNLEVBR04sZUFITSxFQUlOLGVBSk0sRUFLTixnQkFMTSxFQU1OLGlCQU5NLENBM0NSO0lBbURBLEtBQUEsRUFBTyxDQUNMLGVBREssQ0FuRFA7SUFzREEsTUFBQSxFQUFRLENBQ04sYUFETSxDQXREUjtJQXlEQSxhQUFBLEVBQWUsQ0FDYix3QkFEYSxDQXpEZjtJQTREQSxZQUFBLEVBQWMsQ0FDWixXQURZLENBNURkO0lBK0RBLE1BQUEsRUFBUSxDQUNOLGFBRE0sQ0EvRFI7SUFrRUEsTUFBQSxFQUFRLENBQ04saUJBRE0sQ0FsRVI7SUFxRUEsTUFBQSxFQUFRLENBQ04saUJBRE0sQ0FyRVI7SUF3RUEsVUFBQSxFQUFZLENBQ1Ysb0JBRFUsRUFFVixxQkFGVSxDQXhFWjtJQTRFQSxNQUFBLEVBQVEsQ0FDTixhQURNLENBNUVSO0lBK0VBLFFBQUEsRUFBVSxDQUNSLGVBRFEsQ0EvRVY7SUFrRkEsT0FBQSxFQUFTLENBQ1AsY0FETyxDQWxGVDtJQXFGQSxNQUFBLEVBQVEsQ0FDTixhQURNLENBckZSO0lBd0ZBLEtBQUEsRUFBTyxDQUNMLGVBREssQ0F4RlA7SUEyRkEsT0FBQSxFQUFTLENBQ1AsY0FETyxFQUVQLGdCQUZPLENBM0ZUO0lBK0ZBLFFBQUEsRUFBVSxDQUNSLGVBRFEsQ0EvRlY7SUFrR0EsT0FBQSxFQUFTLENBQ1AsZUFETyxFQUVQLGdCQUZPLEVBR1Asa0NBSE8sQ0FsR1Q7SUF1R0EsTUFBQSxFQUFRLENBQ04sbUJBRE0sRUFFTix1QkFGTSxFQUdOLGlCQUhNLEVBSU4sYUFKTSxDQXZHUjtJQTZHQSxNQUFBLEVBQVEsQ0FDTixhQURNLENBN0dSO0lBZ0hBLE1BQUEsRUFBUSxDQUNOLGlCQURNLENBaEhSO0lBbUhBLEtBQUEsRUFBTyxDQUNMLGNBREssQ0FuSFA7SUFzSEEsSUFBQSxFQUFNLENBQ0osY0FESSxDQXRITjtJQXlIQSxNQUFBLEVBQVEsQ0FDTixjQURNLENBekhSO0lBNEhBLEtBQUEsRUFBTyxDQUNMLGNBREssQ0E1SFA7SUErSEEsS0FBQSxFQUFPLENBQ0wsWUFESyxDQS9IUDtJQWtJQSxNQUFBLEVBQVEsQ0FDTixZQURNLENBbElSO0lBcUlBLE1BQUEsRUFBUSxDQUNOLGFBRE0sQ0FySVI7SUF3SUEsS0FBQSxFQUFPLENBQ0wsVUFESyxDQXhJUDtJQTJJQSxNQUFBLEVBQVEsQ0FDTixjQURNLENBM0lSO0lBOElBLE1BQUEsRUFBUSxDQUNOLGFBRE0sQ0E5SVI7SUFpSkEsUUFBQSxFQUFVLENBQ1Isa0JBRFEsRUFFUixpQkFGUSxDQWpKVjs7QUFERiIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID1cbiAgXCJjXCI6IFtcbiAgICBcInNvdXJjZS5jXCJcbiAgXVxuICBcImNwcFwiOiBbXG4gICAgXCJzb3VyY2UuY3BwXCJcbiAgXVxuICBcImN5bmxpYlwiOiBbXG4gICAgXCJzb3VyY2UuY3BwXCJcbiAgXVxuICBcImNsb2p1cmVcIjogW1xuICAgIFwic291cmNlLmNsb2p1cmVcIlxuICBdXG4gIFwibGl0Y29mZmVlXCI6IFtcbiAgICBcInNvdXJjZS5saXRjb2ZmZWVcIlxuICBdXG4gIFwiY29mZmVlXCI6IFtcbiAgICBcInNvdXJjZS5jb2ZmZWVcIlxuICBdXG4gIFwiY3NcIjogW1xuICAgIFwic291cmNlLmNha2VcIlxuICAgIFwic291cmNlLmNzeFwiXG4gICAgXCJzb3VyY2UuY3NcIlxuICBdXG4gIFwiY3NzXCI6IFtcbiAgICBcInNvdXJjZS5jc3NcIlxuICBdXG4gIFwibWFya2Rvd25cIjogW1xuICAgIFwic291cmNlLmdmbVwiXG4gIF1cbiAgXCJnaXRjb21taXRcIjogW1xuICAgIFwidGV4dC5naXQtY29tbWl0XCJcbiAgXVxuICBcImdpdGNvbmZpZ1wiOiBbXG4gICAgXCJzb3VyY2UuZ2l0LWNvbmZpZ1wiXG4gIF1cbiAgXCJnaXRyZWJhc2VcIjogW1xuICAgIFwidGV4dC5naXQtcmViYXNlXCJcbiAgXVxuICBcImdvXCI6IFtcbiAgICBcInNvdXJjZS5nb1wiXG4gICAgXCJ0ZXh0Lmh0bWwuZ29odG1sXCJcbiAgICBcInNvdXJjZS5nb3RlbXBsYXRlXCJcbiAgXVxuICBcImh0bWxcIjogW1xuICAgIFwidGV4dC5odG1sLmdvaHRtbFwiXG4gICAgXCJ0ZXh0Lmh0bWwubXVzdGFjaGVcIlxuICAgIFwidGV4dC5odG1sLnBocFwiXG4gICAgXCJ0ZXh0Lmh0bWwuZXJiXCJcbiAgICBcInRleHQuaHRtbC5ydWJ5XCJcbiAgICBcInRleHQuaHRtbC5iYXNpY1wiXG4gIF1cbiAgXCJqc3BcIjogW1xuICAgIFwidGV4dC5odG1sLmpzcFwiXG4gIF1cbiAgXCJqYXZhXCI6IFtcbiAgICBcInNvdXJjZS5qYXZhXCJcbiAgXVxuICBcImpwcm9wZXJ0aWVzXCI6IFtcbiAgICBcInNvdXJjZS5qYXZhLXByb3BlcnRpZXNcIlxuICBdXG4gIFwiamF2YXNjcmlwdFwiOiBbXG4gICAgXCJzb3VyY2UuanNcIlxuICBdXG4gIFwianNvblwiOiBbXG4gICAgXCJzb3VyY2UuanNvblwiXG4gIF1cbiAgXCJsZXNzXCI6IFtcbiAgICBcInNvdXJjZS5jc3MubGVzc1wiXG4gIF1cbiAgXCJtYWtlXCI6IFtcbiAgICBcInNvdXJjZS5tYWtlZmlsZVwiXG4gIF1cbiAgXCJtdXN0YWNoZVwiOiBbXG4gICAgXCJ0ZXh0Lmh0bWwubXVzdGFjaGVcIlxuICAgIFwic291cmNlLnNxbC5tdXN0YWNoZVwiXG4gIF1cbiAgXCJvYmpjXCI6IFtcbiAgICBcInNvdXJjZS5vYmpjXCJcbiAgXVxuICBcIm9iamNwcFwiOiBbXG4gICAgXCJzb3VyY2Uub2JqY3BwXCJcbiAgXVxuICBcInBlcmw2XCI6IFtcbiAgICBcInNvdXJjZS5wZXJsNlwiXG4gIF1cbiAgXCJwZXJsXCI6IFtcbiAgICBcInNvdXJjZS5wZXJsXCJcbiAgXVxuICBcInBocFwiOiBbXG4gICAgXCJ0ZXh0Lmh0bWwucGhwXCJcbiAgXVxuICBcInBsaXN0XCI6IFtcbiAgICBcInNvdXJjZS5wbGlzdFwiXG4gICAgXCJ0ZXh0LnhtbC5wbGlzdFwiXG4gIF1cbiAgXCJweXRob25cIjogW1xuICAgIFwic291cmNlLnB5dGhvblwiXG4gIF1cbiAgXCJlcnVieVwiOiBbXG4gICAgXCJ0ZXh0Lmh0bWwuZXJiXCJcbiAgICBcInRleHQuaHRtbC5ydWJ5XCJcbiAgICBcInNvdXJjZS5qcy5yYWlscyBzb3VyY2UuanMuanF1ZXJ5XCJcbiAgXVxuICBcInJ1YnlcIjogW1xuICAgIFwic291cmNlLnJ1YnkucmFpbHNcIlxuICAgIFwic291cmNlLnJ1YnkucmFpbHMucmpzXCJcbiAgICBcInNvdXJjZS5zcWwucnVieVwiXG4gICAgXCJzb3VyY2UucnVieVwiXG4gIF1cbiAgXCJzYXNzXCI6IFtcbiAgICBcInNvdXJjZS5zYXNzXCJcbiAgXVxuICBcInNjc3NcIjogW1xuICAgIFwic291cmNlLmNzcy5zY3NzXCJcbiAgXVxuICBcImNzaFwiOiBbXG4gICAgXCJzb3VyY2Uuc2hlbGxcIlxuICBdXG4gIFwic2hcIjogW1xuICAgIFwic291cmNlLnNoZWxsXCJcbiAgXVxuICBcInRjc2hcIjogW1xuICAgIFwic291cmNlLnNoZWxsXCJcbiAgXVxuICBcInpzaFwiOiBbXG4gICAgXCJzb3VyY2Uuc2hlbGxcIlxuICBdXG4gIFwic3FsXCI6IFtcbiAgICBcInNvdXJjZS5zcWxcIlxuICBdXG4gIFwidGV4dFwiOiBbXG4gICAgXCJ0ZXh0LnBsYWluXCJcbiAgXVxuICBcInRvbWxcIjogW1xuICAgIFwic291cmNlLnRvbWxcIlxuICBdXG4gIFwieG1sXCI6IFtcbiAgICBcInRleHQueG1sXCJcbiAgXVxuICBcInhzbHRcIjogW1xuICAgIFwidGV4dC54bWwueHNsXCJcbiAgXVxuICBcInlhbWxcIjogW1xuICAgIFwic291cmNlLnlhbWxcIlxuICBdXG4gIFwic21hcnR5XCI6IFtcbiAgICBcInRleHQuaHRtbC5zbWFydHlcIlxuICAgIFwidGV4dC5odG1sLmJhc2ljXCJcbiAgXVxuIl19
