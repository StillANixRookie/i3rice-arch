#!/usr/bin/env bash

help () {
cat << 'EOB'
# NAME

__gwmsbar__ - Create sidebar of windows, stacked like cards,
with a single fully visible window at the top

# SYNOPSIS

```
gwmsbar [--add|-a|--clean|-c|--focus|-f|--main|-m]
        <WID|>
gwmsbar --cycle|-n|--focus-cycle|-F|--restack|-r|--reset|-R
gwmsbar --help|-h
```

EOB
exit
}

GAP="$(gwmget GAP)"
TOPOFFSET="$(gwmget TOPOFFSET)"

eval "$(mattr wh $(pfm) | awk '{ print "SCRW="$1 "\nSCRH="$2 }')"

STACK="$(gwmget SBARSTACK)"
FOCUS="$(gwmget SBARFOCUS)"
MAIN="$(gwmget SBARMAIN)"

CURSTACK="${STACK}current"
CURFOCUS="${FOCUS}current"
CURMAIN="${MAIN}current"

eval "$(cat "${STACK}default" | awk '{print "DSW="$1 "\nDSH="$2 }')"
eval "$(cat "${FOCUS}default" | awk '{print "DFW="$1 "\nDFH="$2 }')"
eval "$(cat "${MAIN}default"  | awk '{print "DMW="$1 "\nDMH="$2 }')"

DWW=$((DMW + GAP + DSW))
DWH=$((GAP + TOPOFFSET))
DWX=$((SCRW/2 - DWW/2))
DWY=$((GAP + TOPOFFSET))

O_clean () {
	ID="$1"
	sed -i "/${ID}/d" "${STACK}"
	sed -i "/${ID}/d" "${FOCUS}"
	sed -i "/${ID}/d" "${MAIN}"
}
O_add () {
	WID=${1}

	if [[ -s ${STACK} ]]; then
		echo "Adding $WID to STACK"
		lsw | grep -q "$WID" && O_clean "${WID}"
	elif [[ -s ${MAIN} ]]; then
		echo "Stacking next to MAIN"
		lsw | grep -q "$WID" && O_clean "${WID}"

		echo $((DWX + DMW + GAP)) $((TOPOFFSET + GAP)) $DSW $DSH > $CURSTACK

		if [[ -s ${FOCUS} ]]; then
			echo "below FOCUS"
			eval "$(awk '{print "FX="$1}' cat ${CURFOCUS})"
			echo $((DWX + DMW + GAP)) $((TOPOFFSET + GAP)) $DFW $DFH > $CURFOCUS
			echo $((DWX + DMW + GAP)) $((TOPOFFSET + DFH + 2*GAP)) $DSW $DSH > $CURSTACK
		fi

	elif [[ -s ${FOCUS} ]]; then
		echo "FOCUS exists, no MAIN"
		lsw | grep -q "$WID" && O_clean "${WID}"

		echo $((SCRW/2 - DFW/2)) $((TOPOFFSET + GAP)) $DFW $DFH > $CURFOCUS
		echo $((SCRW/2 - DSW/2)) $((TOPOFFSET + DFH + 2*GAP)) $DSW $DSH > $CURSTACK

	else
		echo "STACK is empty"
		echo $((SCRW/2 - DSW/2)) $((TOPOFFSET + GAP)) $DSW $DSH $WID
	fi

	echo ${WID} >> $STACK
	O_restack
	gwmfocus ${WID}
	exit
}
O_focus () {
	WID=${1}
	lsw | grep -q "$WID" && O_clean "${WID}"

	if [[ -s $MAIN ]]; then
		echo "Moving next to MAIN"

		echo $DWX $DWY $DMW $DMH > $CURMAIN
		echo $((DWX + DMW + GAP)) $DWY $DFW $DFH > $CURFOCUS
		echo $((DWX + DMW + GAP)) $((DWY + GAP + DSH)) $DSW $DSH > $CURSTACK

	elif [[ ! -s $FOCUS ]]; then
		echo "Creating FOCUS"

		echo $((SCRW/2 - DFW/2)) $DWY $DFW $DFH > $CURFOCUS
		echo $((SCRW/2 - DSW/2)) $((DWY + GAP + DSH)) $DSW $DSH > $CURSTACK

	else
		echo "Moving $WID to FOCUS"
		echo $(cat $FOCUS) >> $STACK

	fi

	echo ${WID} > $FOCUS
	O_restack
	gwmfocus ${WID}
	exit
}
O_main () {
	WID=${1}
	lsw | grep -q "$WID" && O_clean "${WID}"

	if [[ -s $STACK ]] || [[ -s $FOCUS ]]; then

		echo $DWX $DWY $DMW $DMH > $CURMAIN
		echo $((DWX + DMW + GAP)) $DWY $DSW $DSH > $CURSTACK

		if [[ -s $FOCUS ]]; then
			echo $((DWX + DMW + GAP)) $DWY $DFW $DFH > $CURFOCUS
			echo $((DWX + DMW + GAP)) $((DWY + DSH + GAP)) $DSW $DSH > $CURSTACK
		fi

	else

		echo $((SCRW/2 - DMW/2)) $((SCRH/2 - DMH/2)) $DMW $DMH > $CURMAIN

	fi

	echo ${WID} >> $MAIN
	O_restack
	gwmfocus ${WID}
	exit
}
O_delete () {
	DEL=${1}

	if [[ -n $(grep "$DEL" $MAIN) ]] && [[ $(cat $MAIN | wc -l) == 1 ]]; then
		echo "$DEL was last in MAIN"
		O_clean "${DEL}"

		echo $((SCRW/2 - DSW/2)) $DWY $DSW $DSH > $CURSTACK
		if [[ -s ${FOCUS} ]]; then
			echo $((SCRW/2 - DFW/2)) $DWY $DFW $DFH > $CURFOCUS
			echo $((SCRW/2 - DFW/2)) $((DWY + GAP + DSH)) $DSW $DSH > $CURSTACK
		fi

	elif [[ $DEL == "$(cat ${FOCUS})" ]] && [[ -s ${FOCUS} ]]; then
		echo "$DEL was FOCUS"
		O_clean "${DEL}"

		echo $((SCRW/2 - DSW/2)) $DWY $DSW $DSH > $CURSTACK
		if [[ -s $MAIN ]]; then
			echo $DWX $DWY $DSW $DSH > $CURMAIN
			echo $((DWX + DMW + GAP)) $DWY $DSW $DSH > $CURSTACK
		fi

	elif [[ -n $(grep "$DEL" $STACK) ]] && [[ $(cat $STACK | wc -l) == 1 ]]; then
		echo "$DEL was last in STACK"
		O_clean "${DEL}"

		echo $((SCRW/2 - DSW/2)) $DWY $DSW $DSH > $CURSTACK
		[[ -s $MAIN ]] && echo $((SCRW/2 - DMW/2)) $DWY $DMW $DMH > $CURMAIN

		if [[ -s $FOCUS ]]; then
			echo $DWX $DWY $DMW $DMH > $CURMAIN
			echo $((DWX + DMW + GAP)) $DWY $DFW $DSH > $CURFOCUS
			echo $((DWX + DMW + GAP)) $((DWY + GAP + DSH)) $DSW $DSH > $CURSTACK
		fi

	else
		O_clean "${DEL}"

	fi

	O_restack

	exit
}
O_restack () {
	[[ -s $STACK ]] && cat $STACK | xargs -I {} wtp $(cat $CURSTACK) "{}"
	[[ -s $FOCUS ]] && cat $FOCUS | xargs -I {} wtp $(cat $CURFOCUS) "{}"
	[[ -s $MAIN ]]  && cat $MAIN  | xargs -I {} wtp $(cat $CURMAIN)  "{}"
	exit
}
O_reset () {
	sed -i '/.*/d' $STACK
	sed -i '/.*/d' $FOCUS
	sed -i '/.*/d' $MAIN
	exit
}
O_cycle () {
	OLD=${1}

	[[ -z $OLD ]] && exit
	if [[ -n $(grep "$OLD" $STACK) ]]; then
		[[ $(cat $STACK | wc -l) == 1 ]] && exit
		NEW=$(sed -n "/$OLD/{g;1!p;};h" $STACK)
		[[ -z $NEW ]] && NEW=$(sed 1q $STACK)
		gwmfocus $NEW
	elif [[ -n $(grep "$OLD" $MAIN) ]]; then
		[[ $(cat $MAIN | wc -l) == 1 ]] && exit
		NEW=$(sed -n "/$OLD/{g;1!p;};h" $MAIN)
		[[ -z $NEW ]] && NEW=$(sed 1q $MAIN)
		gwmfocus $NEW
	else
		gwmfocus next
	fi

	exit
}
O_focus-cycle () {
	gwmsbar --focus "$(sed 1q $STACK)"
	exit
}

while true; do
	case $1 in
		--add         | -a ) O_add     "${2:-}" ;;
		--focus       | -f ) O_focus   "${2:-}" ;;
		--main        | -m ) O_main    "${2:-}" ;;
		--clean       | -c ) O_clean   "${2:-}" ;;
		--delete      | -d ) O_delete  "${2:-}" ;;
		--cycle       | -n ) O_cycle   "${2:-}" ;;
		--restack     | -r ) O_restack     ;;
		--reset       | -R ) O_reset       ;;
		--focus-cycle | -F ) O_focus-cycle ;;
		--help ) help ; shift ;;
		-h ) help | sed -n "/^__/,/^$/p;/# SYNOPSIS/,/#/p" | sed 's/__.* - /\t/;/^#/d;/^$/d;s/```//g' && exit ;;
		-- ) shift ; break ;;
		*  ) break         ;;
	esac
	shift
done
